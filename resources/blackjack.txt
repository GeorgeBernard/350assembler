#LETS PLAY BLACKJACK

Initialize Deck:
addi $28 $0 3000
addi $29 $0 3311 #max cards ptr
nop
nop
nextHand:
nop
lw $16 0($28)   #start first pixel
nop
nop
lw $15 0($16)
lw $15 0($16) 
nop
nop
nop
nop
lp $1 0($15)
lp $1 0($15)
nop
nop
nop
lw $23 104($16) #Start Dealers count
nop
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $23 1
addi $18 $0 1
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $28 $28 1

DealersInitCardA:
addi $2 $0 31660
addi $3 $0 41
addi $4 $0 640
addi $5 $0 31660
addi $6 $0 0
addi $7 $0 35350
add $7 $7 $7
looploadDA:
sv $1 0($2)
nop
addi $6 $6 1
addi $2 $2 1
addi $15 $15 1
nop
nop
nop
nop
nop
lp $1 0($15)
lp $1 0($15)
nop
nop
blt $3 $6 1
j looploadDA
add $2 $4 $5
nop
nop
nop
add $5 $4 $5
addi $6 $0 0
blt $7 $2 1
j looploadDA
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $28 $28 1

DealersInitCardB:
addi $1 $0 0
addi $2 $0 31680
addi $3 $0 41
addi $4 $0 640
addi $5 $0 31680
addi $6 $0 0
addi $7 $0 35360
add $7 $7 $7
looploadDB:
sv $1 0($2)
nop
addi $6 $6 1
addi $2 $2 1
addi $1 $1 1
nop
blt $3 $6 1
j looploadDB
nop
nop
nop
add $2 $4 $5
nop
nop
nop
add $5 $4 $5
addi $6 $0 0
blt $7 $2 1
j looploadDB

PlayerInitCardA:
nop
lw $16 0($28)
nop
nop
nop
nop
lw $12 0($16) 
nop
nop
nop
lw $26 104($16) #first count
nop
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $26 1
addi $17 $0 1
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $28 $28 1

addi $3 $0 41
addi $4 $0 61
addi $5 $0 300
addi $14 $5 0
addi $6 $0 350
jal DrawFunction


PlayerInitCardB:
nop
lw $16 0($28)
nop
nop
nop
nop
lw $12 0($16) 
nop
nop
nop
lw $13 104($16)
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $13 1
addi $17 $0 1
nop
add $26 $13 $26
nop 
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $3 $0 41
addi $4 $0 61
addi $28 $28 1
addi $5 $14 20
addi $14 $14 20
addi $6 $0 350
jal DrawFunction

loadStartChip:
addi $3 $0 30
addi $4 $0 30
addi $5 $14 -70
addi $22 $14 -70
addi $6 $0 350
addi $12 $0 62039
sll $12 $12 2
nop
nop
jal DrawFunction

PlayerTurn:
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
pollA:
wp $25 
nop
nop
and $5 $25 $3
nop 
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $4 $6 1
j pollA
nop
bne $25 $11 1 #deal new card if equal
j extraPlayerCard
j dealerReveal 

extraPlayerCard:
nop
lw $16 0($28)
nop
nop
nop
nop
lw $12 0($16) 
nop
nop
nop
lw $13 104($16)
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $13 2
addi $17 $0 1
nop
nop
nop
add $26 $13 $26
nop 
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $3 $0 41
addi $4 $0 61
addi $28 $28 1
addi $5 $14 20
addi $14 $14 20
addi $6 $0 350
jal DrawFunction

DownButton:
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
nop
pollB:
wp $25
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $4 $6 1 # aka down
j PlayerTurn
j pollB

dealerReveal:
lw $16 0($28)
nop
nop
nop
lw $24 104($16)
nop
nop
nop
lw $12 0($16)
nop
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
nop
addi $28 $28 1
add $23 $24 $23
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $24 2
addi $18 $0 1
nop
nop
addi $3 $0 41
addi $4 $0 61
addi $5 $0 320
addi $14 $5 0
addi $6 $0 49
nop
jal DrawFunction
nop
j dealerEval

dealerEval:
addi $21 $0 22
addi $3 $0 16
j dealerCalc

dealerAce:
nop
bne $18 $0 2
addi $23 $0 0
j playerCalc
nop
addi $23 $23 -10
nop
j dealerNewCard

dealerCalc:
nop
nop
sub $4 $23 $3
nop
nop
nop
nop
bne $4 $0 1
j dealerNewCard
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 1
j dealerBust
nop
j dealerNewCard

dealerBust:
sub $4 $23 $21
nop
nop
nop
nop
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 1
j dealerAce
nop
j playerCalc

playerAce:
bne $17 $0 2
addi $26 $0 0
j Decide 
nop
addi $26 $26 -10
j Decide

playerCalc:
nop
sub $4 $26 $21
nop
nop
nop
nop
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 1
j playerAce
nop
j Decide

Decide:
nop
bne $23 $26 7
nop
wli P
wli U
wli S
wli H
j clearScreen
nop
nop
nop
sub $4 $26 $23
nop
nop
nop
nop
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 7
nop
wli W
wli I
wli N
j winChip
nop
nop
nop
wli L
wli O
wli S
wli E
nop
j loseChip


dealerNewCard:
nop
lw $16 0($28)
nop
nop
nop
lw $24 104($16)
nop
nop
nop
lw $12 0($16)
nop
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
nop
addi $28 $28 1
add $23 $24 $23
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $24 1
addi $18 $0 1
nop
nop
addi $3 $0 41
addi $4 $0 61
addi $5 $14 20
addi $14 $5 0
addi $6 $0 49
nop
jal DrawFunction
nop
j dealerEval

clearScreen:
addi $23 0 0
addi $26 $0 0
addi $17 0 0
addi $18 0 0
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
nop
pollC:
wp $25
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $4 $6 1 # aka down
j green
j pollC

green: 
wli 0
nop
addi $1 $0 2
addi $2 $0 0
addi $3 $0 38400
sll $3 $3 3
greenLoop:
sv $1 0($2)
addi $2 $2 1
beq $2 $3 1
j greenLoop
j nextHand

winChip:
addi $3 $0 30
addi $4 $0 30
addi $5 $22 0
addi $6 $0 385
addi $12 $0 62039
sll $12 $12 2
nop
nop
jal DrawFunction
j clearScreen

loseChip:
addi $3 $0 30
addi $4 $0 30
addi $5 $0 250
addi $6 $0 49 
addi $12 $0 62039
sll $12 $12 2
nop
nop
jal DrawFunction
nop
nop
addi $3 $0 30
addi $4 $0 30
addi $5 $0 250
addi $6 $0 350
addi $10 $0 2
nop
jal DrawBlockFunction
nop
j clearScreen


end:
j end

DrawFunction: noop				# args  $3 - w | $4 - h | $5 - x | $6 - y | $12 - pmem_start
								# uses  $1, $2, $7, $8, $9, $10, $11

addi	$1,		$0, 	640 	# scr_w = 640
addi 	$2, 	$0, 	480 	# scr_h = 480
addi 	$10, 	$0, 	0		# color = 0;

#--------- Calc start address ---------#

mult 	$7, 	$6, 	$1 		# start = (img_y * scr_w) + img_x
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
add  	$7, 	$7, 	$5
add 	$11, 	$7, 	$0 		# address = start

#------------- Draw Image -------------#

addi 	$9, 	$0, 	0		# j = 0
drawLoopJ:

addi 	$8, 	$0, 	0		# i = 0
drawLoopI:
lp 		$10, 	0($12)			# color = pmem(p_addr)
lp 		$10, 	0($12)			# color = pmem(p_addr)
addi 	$12, 	$12, 	1 		# p_addr ++
sv 		$10, 	0($11) 			# vmem(start) = 3

addi 	$11, 	$11, 	1 		# addr++
addi 	$10, 	$10, 	1 		# color++
addi 	$8, 	$8, 	1 		# i++

beq 	$8, 	$3, 	1 		# if i != img_w break
j drawLoopI 					# else continue loop

add 	$7, 	$7, 	$1 		# start += scr_w
add 	$11, 	$7, 	$0  	# addr = start
addi 	$9, 	$9, 	1 		# j++

beq 	$9, 	$4, 	1 		# if j != img_h break
j drawLoopJ 					# else continue loop

jr $31

Draw Function --------------------------------#
DrawBlockFunction: noop			# args  $3 - w | $4 - h | $5 - x | $6 - y | $10 - color
								# uses  $1, $2, $7, $8, $9, $10, $11

addi	$1,		$0, 	640 	# scr_w = 640
addi 	$2, 	$0, 	480 	# scr_h = 480

#--------- Calc start address ---------#

mult 	$7, 	$6, 	$1 		# start = (img_y * scr_w) + img_x
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
add  	$7, 	$7, 	$5
add 	$11, 	$7, 	$0 		# address = start

#------------- Draw Image -------------#

addi 	$9, 	$0, 	0		# j = 0
drawBlockLoopJ:

addi 	$8, 	$0, 	0		# i = 0
drawBlockLoopI:
sv 		$10, 	0($11) 			# vmem(start) = 3
addi 	$11, 	$11, 	1 		# addr++
addi 	$8, 	$8, 	1 		# i++

beq 	$8, 	$3, 	1 		# if i != img_w break
j drawBlockLoopI				# else continue loop

add 	$7, 	$7, 	$1 		# start += scr_w
add 	$11, 	$7, 	$0  	# addr = start
addi 	$9, 	$9, 	1 		# j++

beq 	$9, 	$4, 	1 		# if j != img_h break
j drawBlockLoopJ 				# else continue loop

jr $31

