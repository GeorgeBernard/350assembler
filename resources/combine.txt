#----------------------------------- Select -----------------------------------#
noop							# Casino Game Selection Menu
lss  	$0,		$31,	0		# seed lfsr to PC


addi $24, 	$0, 	0			# old_input = 0;
addi $1,	$0, 	0 	
addi $7 $7 0
addi $3 $0 1
addi $5 $0 3

SelectGameLoop:
jal printCasino

sw $3 1000($0)
sw $7 1001($0)
sw $1 1002($0)
sw $5 1003($0)

addi $3 $0 480
addi $4 $0 60
addi $5 $0 80
addi $6 $0 210
addi $12 $0 33239
sll $12 $12 2
nop
nop
jal DrawFunction

lw $3 1000($0)
lw $7 1001($0)
lw $1 1002($0)
lw $5 1003($0)

jal waitInput

addi $1 $1 1
jal DrawBackground

jal printChoHan

sw $3 1000($0)
sw $7 1001($0)
sw $1 1002($0)
sw $5 1003($0)

addi $3 $0 480
addi $4 $0 60
addi $5 $0 80
addi $6 $0 210
addi $12 $0 40439
sll $12 $12 2
nop
nop
jal DrawFunction

lw $3 1000($0)
lw $7 1001($0)
lw $1 1002($0)
lw $5 1003($0)

jal waitInput

addi $1, 	$1, 	1
jal DrawBackground
jal executeButton
bne $3 $7 1
j chohan
nop

jal printWar

sw $3 1000($0)
sw $7 1001($0)
sw $1 1002($0)
sw $5 1003($0)

addi $3 $0 480
addi $4 $0 60
addi $5 $0 80
addi $6 $0 210
addi $12 $0 54839
sll $12 $12 2
nop
nop
jal DrawFunction

lw $3 1000($0)
lw $7 1001($0)
lw $1 1002($0)
lw $5 1003($0)

jal waitInput

addi $1, 	$1, 	1
jal DrawBackground
jal executeButton
bne $3 $7 1
j WAR
nop

jal printBlackjack

sw $3 1000($0)
sw $7 1001($0)
sw $1 1002($0)
sw $5 1003($0)

addi $3 $0 480
addi $4 $0 60
addi $5 $0 80
addi $6 $0 210
addi $12 $0 47639
sll $12 $12 2
nop
nop
jal DrawFunction

lw $3 1000($0)
lw $7 1001($0)
lw $1 1002($0)
lw $5 1003($0)

jal waitInput

addi $1, 	$1, 	1
jal DrawBackground
jal executeButton
bne $3 $7 1
j blackjack
nop

jal printSlots

addi $3 $0 480
addi $4 $0 60
addi $5 $0 80
addi $6 $0 210
addi $12 $0 7783
sll $12 $12 5
nop
nop
jal DrawFunction

lw $3 1000($0)
lw $7 1001($0)
lw $1 1002($0)
lw $5 1003($0)

jal waitInput

addi $1, 	$0, 	0
jal DrawBackground
jal executeButton
bne $3 $7 1
j StartSlots
nop


j SelectGameLoop

end:
END: j END

waitInput: noop				# wait for user input
wp 	 $25					# update(input)
noop
noop
noop
noop
bne  $25,   $24,     1      # if (input != old_input) break
j    waitInput              # else continue loop
add  $24,   $25,    $0      # old_input = new_input
jr 	 $31

executeButton:
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
nop
nop
nop
nop
and $5 $25 $3
nop 
nop
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $6 $4 2
addi $7 $7 0
jr $31
addi $7 $7 1
jr $31

#---------------------LETS PLAY BLACKJACK----------------------------------#
blackjack:
Initialize Deck:
addi $28 $0 3000
addi $29 $0 3311 #max cards ptr
nop
nop
j clearScreen
nextHand:
nop
lw $16 0($28)   #start first pixel
nop
nop
lw $15 0($16)
lw $15 0($16) 
nop
nop
nop
nop
lp $1 0($15)
lp $1 0($15)
nop
nop
nop
lw $23 104($16) #Start Dealers count
nop
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $23 1
addi $18 $0 1
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $28 $28 1

DealersInitCardA:
addi $2 $0 31660
addi $3 $0 41
addi $4 $0 640
addi $5 $0 31660
addi $6 $0 0
addi $7 $0 35350
add $7 $7 $7
looploadDA:
sv $1 0($2)
nop
addi $6 $6 1
addi $2 $2 1
addi $15 $15 1
nop
nop
nop
nop
nop
lp $1 0($15)
lp $1 0($15)
nop
nop
blt $3 $6 1
j looploadDA
add $2 $4 $5
nop
nop
nop
add $5 $4 $5
addi $6 $0 0
blt $7 $2 1
j looploadDA
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $28 $28 1

DealersInitCardB:
addi $1 $0 0
addi $2 $0 31680
addi $3 $0 41
addi $4 $0 640
addi $5 $0 31680
addi $6 $0 0
addi $7 $0 35360
add $7 $7 $7
looploadDB:
sv $1 0($2)
nop
addi $6 $6 1
addi $2 $2 1
addi $1 $1 1
nop
blt $3 $6 1
j looploadDB
nop
nop
nop
add $2 $4 $5
nop
nop
nop
add $5 $4 $5
addi $6 $0 0
blt $7 $2 1
j looploadDB

PlayerInitCardA:
nop
lw $16 0($28)
nop
nop
nop
nop
lw $12 0($16) 
nop
nop
nop
lw $26 104($16) #first count
nop
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $26 1
addi $17 $0 1
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $28 $28 1

addi $3 $0 41
addi $4 $0 61
addi $5 $0 300
addi $14 $5 0
addi $6 $0 350
jal DrawFunction


PlayerInitCardB:
nop
lw $16 0($28)
nop
nop
nop
nop
lw $12 0($16) 
nop
nop
nop
lw $13 104($16)
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $13 1
addi $17 $0 1
nop
add $26 $13 $26
nop 
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $3 $0 41
addi $4 $0 61
addi $28 $28 1
addi $5 $14 20
addi $14 $14 20
addi $6 $0 350
jal DrawFunction

loadStartChip:
addi $3 $0 30
addi $4 $0 30
addi $5 $14 -70
addi $22 $14 -70
addi $6 $0 350
addi $12 $0 62039
sll $12 $12 2
nop
nop
jal DrawFunction

PlayerTurn:
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
pollA:
wp $25 
nop
nop
and $5 $25 $3
nop 
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $4 $6 1
j pollA
nop
bne $25 $11 1 #deal new card if equal
j extraPlayerCard
j dealerReveal 

extraPlayerCard:
nop
lw $16 0($28)
nop
nop
nop
nop
lw $12 0($16) 
nop
nop
nop
lw $13 104($16)
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $13 2
addi $17 $0 1
nop
nop
nop
add $26 $13 $26
nop 
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
addi $3 $0 41
addi $4 $0 61
addi $28 $28 1
addi $5 $14 20
addi $14 $14 20
addi $6 $0 350
jal DrawFunction

DownButton:
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
nop
pollB:
wp $25
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $4 $6 1 # aka down
j PlayerTurn
j pollB

dealerReveal:
lw $16 0($28)
nop
nop
nop
lw $24 104($16)
nop
nop
nop
lw $12 0($16)
nop
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
nop
addi $28 $28 1
add $23 $24 $23
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $24 2
addi $18 $0 1
nop
nop
addi $3 $0 41
addi $4 $0 61
addi $5 $0 320
addi $14 $5 0
addi $6 $0 49
nop
jal DrawFunction
nop
j dealerEval

dealerEval:
addi $21 $0 22
addi $3 $0 16
j dealerCalc

dealerAce:
nop
bne $18 $0 2
addi $23 $0 0
j playerCalc
nop
addi $23 $23 -10
nop
j dealerNewCard

dealerCalc:
nop
nop
sub $4 $23 $3
nop
nop
nop
nop
bne $4 $0 1
j dealerNewCard
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 1
j dealerBust
nop
j dealerNewCard

dealerBust:
sub $4 $23 $21
nop
nop
nop
nop
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 1
j dealerAce
nop
j playerCalc

playerAce:
bne $17 $0 2
addi $26 $0 0
j Decide 
nop
addi $26 $26 -10
j Decide

playerCalc:
nop
sub $4 $26 $21
nop
nop
nop
nop
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 1
j playerAce
nop
j Decide

Decide:
nop
bne $23 $26 7
nop
wli P
wli U
wli S
wli H
j clearScreen
nop
nop
nop
sub $4 $26 $23
nop
nop
nop
nop
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 7
nop
wli W
wli I
wli N
j winChip
nop
nop
nop
wli L
wli O
wli S
wli E
nop
j loseChip


dealerNewCard:
nop
lw $16 0($28)
nop
nop
nop
lw $24 104($16)
nop
nop
nop
lw $12 0($16)
nop
nop
nop
bne $28 $29 1 # If max- set back to zero, else increment 1
addi $28 $0 3000
nop
nop
addi $28 $28 1
add $23 $24 $23
nop
nop
nop
addi $19 $0 11
nop
nop
nop
nop
bne $19 $24 1
addi $18 $0 1
nop
nop
addi $3 $0 41
addi $4 $0 61
addi $5 $14 20
addi $14 $5 0
addi $6 $0 49
nop
jal DrawFunction
nop
j dealerEval

clearScreen:
addi $23 0 0
addi $26 $0 0
addi $17 0 0
addi $18 0 0
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
nop
pollC:
wp $25
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $4 $6 1 # aka down
j green
j pollC

green: 
wli 0
nop
addi $1 $0 2
addi $2 $0 0
addi $3 $0 38400
sll $3 $3 3
greenLoop:
sv $1 0($2)
addi $2 $2 1
beq $2 $3 1
j greenLoop
j nextHand

winChip:
addi $3 $0 30
addi $4 $0 30
addi $5 $22 0
addi $6 $0 385
addi $12 $0 62039
sll $12 $12 2
nop
nop
jal DrawFunction
j clearScreen

loseChip:
addi $3 $0 30
addi $4 $0 30
addi $5 $0 250
addi $6 $0 49 
addi $12 $0 62039
sll $12 $12 2
nop
nop
jal DrawFunction
nop
nop
addi $3 $0 30
addi $4 $0 30
addi $5 $0 250
addi $6 $0 350
addi $10 $0 2
nop
jal DrawBlockFunction
nop
j clearScreen


j END
#------------------------------- BLACKJACK END --------------------------------#

#--------------------------------- Slots Game ---------------------------------#
StartSlots: noop				# slots 

#------------ Setup screen ------------#
# DrawTechnicolor border
addi 	$3, 	$0, 	640		# img_w = 640
addi	$4, 	$0, 	480 	# img_h = 480
addi	$5, 	$0,		0		# img_x = 0
addi 	$6, 	$0, 	0		# img_y = 0
addi	$10, 	$0, 	0 		# color = 0
jal DrawTechnicolor

# Draw Black slots screen
addi 	$3, 	$0, 	480		# img_w = 480
addi	$4, 	$0, 	240 	# img_h = 240
addi	$5, 	$0,		80		# img_x = 80
addi 	$6, 	$0, 	120 	# img_y = 120
addi	$10, 	$0, 	0 		# color = 0
jal DrawBlockFunction

#-------------- Game Loop -------------#
addi 	$24, 	$0, 	0		# old_input = 0;
addi 	$1,		$0, 	0 		# i = 0
addi 	$2, 	$0, 	10		# rounds = 10
addi 	$3, 	$0, 	0		# j = 0

SlotsGameLoop:

sw 		$1,  	1000($0) 		# save $1-3 in memory
sw 		$2, 	1001($0)
sw 		$3, 	1002($0)

addi 	$10, 	$0, 	0 		# color = 0
addi 	$12, 	$0, 	1 		# set limit to 32'd1
noop
noop
noop
sll 	$12, 	$12, 	5 		# limit = limit * 2^5

addi 	$15, 	$0, 	0		# stop1 = 0
addi 	$16, 	$0, 	0 		# stop2 = 0
addi 	$17, 	$0, 	0		# stop3 = 0
addi 	$21, 	$0, 	0		# event_enum = 0

SlotsPrintLoop:
# Iterate over colors
lrs 	$20, 	$0, 	0
noop
noop
noop
add 	$10, 	$10, 	$20		# color += lfsr.read();
addi 	$3, 	$0, 	3 		# bitmask3 = 3
noop
noop
noop
and 	$4, 	$3, 	$10 	# last_two_bits = bitmask3 & color
noop
noop
noop
bne 	$4, 	$0, 	1 		# if color != black skip
addi 	$10, 	$10,   	1 		# else color++

bne 	$15, 	$0, 	5 		# when set skip draw
# Draw Slot 1 screen
addi 	$3, 	$0, 	80		# img_w = 80
addi	$4, 	$0, 	120 	# img_h = 120
addi	$5, 	$0,		140		# img_x = 140
addi 	$6, 	$0, 	180 	# img_y = 180
jal DrawBlockFunction

bne 	$16, 	$0, 	5		# when set skip draw
# Draw Slot 2 screen
addi 	$3, 	$0, 	80		# img_w = 80
addi	$4, 	$0, 	120 	# img_h = 120
addi	$5, 	$0,		280		# img_x = 280
addi 	$6, 	$0, 	180 	# img_y = 180
jal DrawBlockFunction

# Draw Slot 3 screen
bne 	$17, 	$0, 	5
addi 	$3, 	$0, 	80		# img_w = 80
addi	$4, 	$0, 	120 	# img_h = 120
addi	$5, 	$0,		420		# img_x = 420
addi 	$6, 	$0, 	180 	# img_y = 180
jal DrawBlockFunction

addi 	$23, 	$0, 	10000
jal 	Sleep

beq 	$17, 	$0, 	1 		# if start3 set, then end loop
j 		EndSlotsPrintLoop
noop 		

addi 	$3, 	$0, 	3 		# bitmask3 = 3
and 	$4, 	$3, 	$10 	# last_two_bits = bitmask3 & color

# Determine stop logic
addi 	$20, 	$0, 	25 		# rem = color % 25
rem 	$19, 	$10, 	$20
rem 	$19, 	$10, 	$20
rem 	$19, 	$10, 	$20
rem 	$19, 	$10, 	$20
rem 	$19, 	$10, 	$20
rem 	$19, 	$10, 	$20
rem 	$19, 	$10, 	$20
rem 	$19, 	$10, 	$20
noop
noop
noop
addi 	$20, 	$0, 	24
bne 	$20, 	$19, 	23 		# if (rem == 24)
addi 	$21, 	$21, 	1 		# event++
noop 							#--------------------------#
addi 	$20, 	$0, 	1 	
noop
noop
noop
bne 	$20, 	$21, 	1		# if (event == 1)
add 	$15, 	$4,		$0 		# then stop1 = color
noop 							# -------------------------#
addi 	$20, 	$0, 	2
noop
noop
noop
bne 	$20, 	$21, 	1 		# if (event == 2)
add 	$16, 	$4, 	$0 		# then stop2 = color
noop 							#--------------------------#
addi 	$20, 	$0, 	3
noop
noop
noop
bne		$20, 	$21, 	1 		# if (event == 3)
add 	$17, 	$4, 	$0 		# then stop3 = color
noop 							#--- end if (rem == 24) ---#
noop							# Noop sled
noop
noop
noop

j 	SlotsPrintLoop 				# continue loop

EndSlotsPrintLoop:

lw 		$1,  	1000($0)
lw 		$2, 	1001($0)
lw 		$3, 	1002($0)

#---------- Calculate score -----------#
wli 					0
#add 	$22,	$15, 	$0
#jal 	printNumber
#add 	$22,	$16, 	$0
#jal 	printNumber
#add 	$22,	$17, 	$0
#jal		printNumber

addi 	$20, 	$0, 	0		# Score = 0
noop 							# initialize the score
noop
noop
bne 	$15, 	$16, 	1 		# if first == second
addi 	$20, 	$20, 	2		# score += 2
noop
noop
noop
bne 	$16,	$17, 	1 		# if second == third
addi 	$20, 	$20, 	2 		# score += 2

wli 					S
wli 					c
wli 					o
wli 					r
wli 					e
wli 					58

addi 	$22, 	$20, 	0		
jal 	printNumber
nooop
wli 					!

wli 					32
wli 					32
wli 					32
wli 					32
wli 					32
wli 					32
wli 					32
wli 					32

addi 	$21,  	$0, 	4
bne 	$20, 	$21, 	9
noop
wli 					J
wli 					A 
wli 					C
wli 					K
wli 					P
wli 					O
wli 					T
wli 					!

#------------ Print Score -------------#
waitInputSlots: noop            # wait for user input
wp   	$25                    	# update(input)
addi 	$26, 	$0, 	1 		# zeroeth bitmask
noop
noop
and  	$27,   $26,     $25    	# new_input = bitmask & input
noop
noop
noop
bne  	$24,   $27,     1       # if (input != old_input) break
j waitInputSlots             	# else continue loop
add  	$24,   $27,     $0      # old_input = new_input

addi 	$1, 	$1, 	1
beq 	$1, 	$2 		1 		# if (i == roundLimit) break
j 	SlotsGameLoop 				# else continue loop

j END
#--------------------------------- End Slots ----------------------------------#

#------------------------------- Draw Function --------------------------------#
DrawTechnicolor: noop			# args  $3 - w | $4 - h | $5 - x | $6 - y | $10 - color
								# uses  $1, $2, $7, $8, $9, $10

addi	$1,		$0, 	640 	# scr_w = 640
addi 	$2, 	$0, 	480 	# scr_h = 480

#--------- Calc start address ---------#

mult 	$7, 	$6, 	$1 		# start = (img_y * scr_w) + img_x
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
add  	$7, 	$7, 	$5
add 	$11, 	$7, 	$0 		# address = start

#------------- Draw Image -------------#

addi 	$9, 	$0, 	0		# j = 0
drawTechnicolorLoopJ:

addi 	$8, 	$0, 	0		# i = 0
drawTechnicolorLoopI:
sv 		$10, 	0($11) 			# vmem(start) = 3
addi 	$11, 	$11, 	1 		# addr++
addi 	$10, 	$10, 	1 		# color++
addi 	$8, 	$8, 	1 		# i++

beq 	$8, 	$3, 	1 		# if i != img_w break
j drawTechnicolorLoopI 			# else continue loop

add 	$7, 	$7, 	$1 		# start += scr_w
add 	$11, 	$7, 	$0  	# addr = start
addi 	$9, 	$9, 	1 		# j++

beq 	$9, 	$4, 	1 		# if j != img_h break
j drawTechnicolorLoopJ 			# else continue loop

jr $31

#------------------------------- Sleep Function -------------------------------#

Sleep: noop                     # args: $23
                                # uses: $22
sll     $23,    $23,    4
addi    $22,    $0,     0       # i == 0;
sleepLoop:
noop
noop
noop
noop
addi    $22,    $22,    1
beq     $23,    $22,    1
j   sleepLoop

jr $31
#-----------------------------------War-----------------------------#
WAR: noop 					# War Game

clearScreenWarInit:
nop
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
pollCWarInit:
wp $25
nop
nop
and $6 $25 $3
nop
nop
nop
nop
bne $3 $6 1 # aka up
j greenWarInit
j pollCWarInit

greenWarInit: 
wli 0
nop
addi $1 $0 2
addi $2 $0 0
addi $3 $0 38400
sll $3 $3 3
greenLoopWarInit:
sv $1 0($2)
addi $2 $2 1
beq $2 $3 1
j greenLoopWarInit
nop


addi $21 $0 5
addi $22 $0 13
shuffledeckB:
addi $27 $0 3992
nop
add $8 $27 $0
nop
nop
nop
addi $9 $0 51
addi $10 $0 0
addi $16 $0 1234
nop
nop
nop
lss $2 $16 0
nop
nop
nop
nop
lrs $2 $16 0
nop
nop
nop
nop
sll $2 $2 27
nop
nop
nop
srl $2 $2 27
nop
nop
add $2 $2 $27
nop
nop
nop
nop
addi $3 $27 1
addi $4 $27 52
addi $10 $0 1

WloopB:
lw $7 0($2)
lw $5 0($4)
nop
nop
nop
sw $7 0($4)
sw $5 0($2)
nop
nop
nop
sub $4 $4 $10
nop
nop
nop
nop
beq $4 $3 1
j WloopB

ShuffleDeckA:
addi $29 $0 4095
nop
nop
addi $29 $29 -52
nop
nop
nop
nop
add $8 $29 $0
nop
nop
nop
addi $9 $0 51
nop
addi $10 $0 0
nop
nop
lsr $2 $16 0
nop
nop
nop
sll $2 $2 27
nop
nop
nop 
nop
srl $2 $2 27
nop
nop
nop
nop
add $2 $2 $29
nop
nop
nop
addi $2 $29 3
addi $3 $29 1
addi $4 $29 52
addi $10 $0 1
addi $19 $0 3
nop
nop
loopWC:
lw $7 0($2)
lw $5 0($4)
nop
nop
nop
sw $7 0($4)
sw $5 0($2)
nop
nop
sub $4 $4 $10
nop
nop
nop
nop
beq $4 $3 1
j loopWC
nop
addi $28 $29 0

loadDmemWCB:
lw $17 0($27)
nop
nop
nop
lw $13 0($17)
lw $13 0($17)
nop
nop
nop
nop
lp $14 0($13)
lp $14 0($13)
addi $27 $27 1
nop
nop

loadDmemWCA:
lw $12 0($28)
nop
nop
nop
lw $9 0($12)
lw $9 0($12)
nop
nop
nop 
nop
WarButtonA:
wp $25
bne $25 $0 1
j WarButtonA
nop
nop
nop
addi $3 $0 41
addi $4 $0 61
addi $5 $0 100
addi $6 $0 49
nop
nop
nop
addi $22 $6 30
nop
nop
sw $12 1000($0)
nop
nop
nop
add $12 $9 0
nop
nop
nop
nop
jal DrawFunction
nop
nop
lw $12 1000($0)
nop
nop
WButtonB:
wp $25
beq $25 $0 1
j WButtonB

nop
nop
nop
nop
sw $12 1000($0)
nop
nop
nop
add $12 $13 0
nop
nop
nop
nop
addi $3 $0 41
addi $4 $0 61
addi $5 $0 500
addi $6 $0 49
nop
nop
nop
addi $23 $6 30
nop
nop
nop
jal DrawFunction
nop
addi $28 $28 1
nop
nop
nop
lw $12 1000($0)
nop
nop
wli 0
nop
nop
nop
nop
checkWar:
lw $3 52($12)
nop
nop
lw $4 52($17)
nop
nop
nop
nop	
nop
sub $4 $4 $3
nop
nop
nop
nop
bne $4 $0 5
nop
wli T
wli I
wli E
j faceoff
nop
nop
nop
srl $4 $4 31
nop
nop
nop
nop
bne $4 $0 5
nop
wli P
wli 50
j clearScreenWar 
nop
nop
nop
wli P
wli 49
j clearScreenWar

endWar:
j loadDmemWCB

faceoff:
nop
wli 0
sw $10 1000($0)
sw $7 1001($0)
sw $8 1002($0)
sw $9 1003($0)
sw $2 1004($0)

addi $3 $0 41
addi $4 $0 61
addi $5 $0 100
addi $6 $0 129
nop
nop
nop
addi $22 $6 80
nop
nop
addi $10 $0 1

jal DrawTechnicolor

addi $3 $0 41
addi $4 $0 61
addi $5 $0 500
addi $6 $0 129
nop
nop
nop
nop
addi $10 $0 1

jal DrawTechnicolor


addi $3 $0 41
addi $4 $0 61
addi $5 $0 100
addi $6 $22 0
nop
nop
nop
nop
addi $10 $0 1

jal DrawTechnicolor

addi $3 $0 41
addi $4 $0 61
addi $5 $0 500
addi $6 $22 0
nop
nop
addi $22 $6 80
nop
nop
nop
addi $10 $0 1

jal DrawTechnicolor

addi $3 $0 41
addi $4 $0 61
addi $5 $0 100
addi $6 $22 0
nop
nop
nop
nop

lw $12 0($28)
nop
nop
nop
lw $9 0($12)
lw $9 0($12)
nop
nop
nop
nop
sw $12 1005($0)
nop
nop
nop
addi $12 $9 0
nop
nop
nop
addi $28 $28 1
nop
nop
nop

jal DrawFunction
nop
nop

addi $3 $0 41
addi $4 $0 61
addi $5 $0 500
addi $6 $22 0
addi $22 $6 80
nop
nop
lw $17 0($28)
nop
nop
nop
lw $9 0($17)
lw $9 0($17)
nop
nop
nop
nop
addi $12 $9 0
nop
nop
nop
addi $28 $28 1
nop
nop
nop

jal DrawFunction
nop
nop

nop
lw $10 1000($0)
lw $7 1001($0)
lw $8 1002($0)
lw $9 1003($0)
lw $2 1004($0)
lw $12 1005($0)
nop
nop
nop
nop
j doneWar

doneWar:
j checkWar

clearScreenWar:
nop
addi $11 $0 3
addi $3 $0 1
addi $4 $0 2
pollCWar:
wp $25
nop
nop
and $6 $25 $3
nop
nop
nop
nop
bne $3 $6 1 # aka up
j greenWar
j pollCWar

greenWar: 
wli 0
nop
addi $1 $0 2
addi $2 $0 0
addi $3 $0 38400
sll $3 $3 3
greenLoopWar:
sv $1 0($2)
addi $2 $2 1
beq $2 $3 1
j greenLoopWar
j nextWar

nextWar:
j endWar

#-----------------------------------END WAR ------------------------#
#------------------------------------- CHO HAN --------------------------------#
chohan:

pollCH:
wp $25
nop
nop
and $6 $25 $4
nop
nop
nop
nop
beq $4 $6 1 # aka down
j greenCH
j pollCH

greenCH: 
wli 0
nop
addi $1 $0 2
addi $2 $0 0
addi $3 $0 38400
sll $3 $3 3
greenLoopCH:
sv $1 0($2)
addi $2 $2 1
beq $2 $3 1
j greenLoopCH

noop                        # Cho-Han Game

addi $1,    $0,      1      # init_dice = 1;
addi $2,    $0,      5      # end_dice  = 6;

noop                        # Make dice roll
addi $3,    $0,      0      # i = 0;
addi $4,    $0,      7      # j = 7;
addi $5,    $0,      6      # roundLimit = 7
addi $6,    $0,      1      # odd_bitmask = 0x00000001 = 1
addi $7,    $0,      0      # old_input1 = 0
addi $10,   $0,      0      # counter = 0
addi $11,   $0,      0      # choice input = 0
addi $12,   $0,      2      # 2nd bit mask
addi $13,   $0,      0      # execute input = 0
addi $14,   $0,      0      # score = 0;
addi $15,   $0,      0      # saved user guess

lss  $0,    $31,     0      # seed lfsr to PC

#---------- Start Game Round ----------#

DiceRollRound:

#------------ Prompt input ------------#
guessLoop:
wli                 0      # clear display
jal printGuessPrompt

bne  $11,   $1,     1
jal printHan
bne  $11,   $0,     1
jal printCho

waitInputG: noop            # wait for user input
wp   $25                    # update(input)
noop
noop
and  $11,   $25,    $6      # get zeroeth bit from input
and  $13,   $25,    $12     # get first bit from input
noop
noop
bne  $11,   $7,     1       # if (input != old_input) break
j    waitInputG             # else continue loop
add  $7,    $11,    $0      # old_input  = new_input
add  $15,   $11,    $0      # save_input = new_input

noop
beq  $13,   $12,    1       # if second button high, then break
j guessLoop                 # else continue loop

draw:
wli                  0
#------- Get Random Dice values -------#
lrs  $3,    $0,      0
noop
noop
noop
rem  $22,   $3,     $2      # $22 = $3 % 5
rem  $22,   $3,     $2
rem  $22,   $3,     $2
rem  $22,   $3,     $2
rem  $22,   $3,     $2
rem  $22,   $3,     $2
noop
noop
noop
add  $3,    $22,    $0
#jal printNumber

lrs  $4,    $0,      0
noop
noop
noop
rem  $22,   $4,     $2      # $22 = $4 % 5
rem  $22,   $4,     $2
rem  $22,   $4,     $2
rem  $22,   $4,     $2
rem  $22,   $4,     $2
rem  $22,   $4,     $2
noop
noop
noop
add  $4,    $22,    $0
#jal printNumber

#-------------- Draw Dice -------------#
# args  $3 - w | $4 - h | $5 - x | $6 - y | $12 - p_start
# uses  $1, $2, $7, $8, $9, $10, $11

sw      $1,     1000($0)
sw      $2,     1001($0)
sw      $3,     1002($0)
sw      $4,     1003($0)
sw      $5,     1004($0)
sw      $6,     1005($0)
sw      $7,     1006($0)
sw      $8,     1007($0)
sw      $9,     1008($0)
sw      $10,    1009($0)
sw      $11,    1010($0)
sw      $12,    1011($0)
sw      $13,    1012($0)
sw      $14,    1013($0)
sw      $15,    1014($0)
sw      $31,    1015($0)

#------------- Roll Dice --------------#

addi    $13,    $0,     0       # roll_i = 0;
addi    $14,    $0,     10      # roll_lim = 0;
rollDice:
addi    $23,    $0,     5000
jal Sleep
lw      $2,     1001($0)
noop
noop
noop
rem     $22,    $13,    $2      # dn = roll_i % 5
rem     $22,    $13,    $2
rem     $22,    $13,    $2
rem     $22,    $13,    $2
rem     $22,    $13,    $2
rem     $22,    $13,    $2

addi    $3,     $0,     22      # img_w = 20
addi    $4,     $0,     22      # img_h = 20
addi    $5,     $0,     280     # img_x = 100
addi    $6,     $0,     220     # img_y = 100
lw      $12,    400($22)          # p_addr = dmem(400)
jal DrawFunction

addi    $3,     $0,     22      # img_w = 20
addi    $4,     $0,     22      # img_h = 20
addi    $5,     $0,     360     # img_x = 100
addi    $6,     $0,     220     # img_y = 100
lw      $12,    400($22)          # p_addr = dmem(400)
jal DrawFunction

addi    $13,    $13,    1       # i++
beq     $14,    $13,    1       # if i == lim break
j  rollDice                     # else continue loop


#----------- Draw Final Dice ----------#
lw      $3,     1002($0)
lw      $4,     1003($0)

addi    $13,    $3,     400     # get dice lookup
addi    $14,    $4,     400      

addi    $3,     $0,     22      # img_w = 20
addi    $4,     $0,     22      # img_h = 20
addi    $5,     $0,     280     # img_x = 100
addi    $6,     $0,     220     # img_y = 100
lw      $12,    0($13)          # p_addr = dmem(400)
jal DrawFunction

addi    $3,     $0,     22      # img_w = 20
addi    $4,     $0,     22      # img_h = 20
addi    $5,     $0,     360     # img_x = 100
addi    $6,     $0,     220     # img_y = 100
lw      $12,    0($14)          # p_addr = dmem(400)
jal DrawFunction

lw      $1,     1000($0)
lw      $2,     1001($0)
lw      $3,     1002($0)
lw      $4,     1003($0)
lw      $5,     1004($0)
lw      $6,     1005($0)
lw      $7,     1006($0)
lw      $8,     1007($0)
lw      $9,     1008($0)
lw      $10,    1009($0)
lw      $11,    1010($0)
lw      $12,    1011($0)
lw      $13,    1012($0)
lw      $14,    1013($0)
sw      $15,    1014($0)
sw      $31,    1015($0)

#-------- Calculate sum parity --------#
add  $8,    $4,     $3      # sum = i + j;
noop
noop
noop
and  $9,    $8,     $6      # par = sum & odd_bitmask
noop 
noop
noop
addi $8,    $8,     2       # add 2 to "1 index" dice

wli                 0
wli                 S
wli                 u
wli                 m
wli                 58      # colon

add  $22,   $8,     $0      # print sum!
jal printNumber
noop
wli                 32

bne  $9,    $1,     1       # if (par == 1) then odd
jal printHan                # disp("Han")
bne  $9,    $0,     1       # if (par == 0) then even
jal printCho                # disp("Cho")

noop
wli                 !

waitInputB: noop            # wait for user input
wp 	 $25					# update(input)
and  $11,   $25,    $6      
noop
noop
noop
bne  $11,   $7,     1       # if (input != old_input) break
j    waitInputB             # else continue loop
add  $7,    $11,    $0      # old_input = new_input

#---------- Print good guest ----------#
wli                 0       # clear lcd

beq  $15,   $9,     2       # if guess != par
jal printBadGuess           # print printBadGuess
j   waitInputA

jal printGoodGuess          # else print goodGuess and 
addi  $14,   $14,    1       # increment score

waitInputA: noop            # wait for user input
wp   $25                    # update(input)
and  $11,   $25,     $6     
noop
noop
noop
bne  $11,   $7,     1       # if (input != old_input) break
j    waitInputA             # else continue loop
add  $7,    $11,    $0      # old_input = new_input

addi $10,   $10,    1       # counter++
beq  $10,    $5,    1       # if (counter == roundLimit) break
j DiceRollRound             # else continue

#------------- Print score -------------#
wli                 0
wli                 S 
wli                 c 
wli                 o
wli                 r 
wli                 e
wli                 58
wli                 32

add  $22,   $14,    $0
jal  printNumber

waitInputF: noop            # wait for user input
wp   $25                    # update(input)
and  $11,   $25,     $6     
noop
noop
noop
bne  $11,   $7,     1       # if (input != old_input) break
j    waitInputF             # else continue loop
add  $7,    $11,    $0      # old_input = new_input

j END                  		# end program


#-------------------------------- Print ChoHan --------------------------------#
LCDnewline:
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
wli                  35
jr $31

printGuessPrompt:
wli                  G
wli                  u
wli                  e
wli                  s
wli                  s
wli                  58
jr $31

printGoodGuess:
wli                  W
wli                  i
wli                  n
wli                  !
jr $31

printBadGuess:
wli                  F
wli                  a
wli                  i
wli                  l
wli                  !
jr $31

printCho:
wli                 C       # disp("Cho")
wli                 h
wli                 o
jr  $31

printHan:
wli                 H       # disp("Han")
wli                 a
wli                 n
jr  $31


#-------------------------------- Print Number --------------------------------#
printNumber: noop			# args <22>, uses <23> 
addi	$23, 	$0, 	0
bne		$22, 	$23, 	2	# if arg = 0
noop
wli 					48	# disp('0')

addi	$23, 	$0, 	1
bne		$22, 	$23, 	2	# if arg = 1
noop
wli 					49	# disp('1')

addi	$23, 	$0, 	2
bne		$22, 	$23, 	2	# if arg = 2
noop
wli 					50	# disp('2')

addi	$23, 	$0, 	3
bne		$22, 	$23, 	2	# if arg = 3
noop
wli 					51	# disp('3')

addi	$23, 	$0, 	4
bne		$22, 	$23, 	2	# if arg = 4
noop
wli 					52	# disp('4')

addi	$23, 	$0, 	5
bne		$22, 	$23, 	2	# if arg = 5
noop
wli 					53	# disp('5')

addi	$23, 	$0, 	6
bne		$22, 	$23, 	2	# if arg = 6
noop
wli 					54	# disp('6')

addi	$23, 	$0, 	7
bne		$22, 	$23, 	2	# if arg = 7
noop
wli 					55	# disp('7')

addi	$23, 	$0, 	8
bne		$22, 	$23, 	2	# if arg = 8
noop
wli 					56	# disp('8')

addi	$23, 	$0, 	9
bne		$22, 	$23, 	2	# if arg = 9
noop
wli 					57	# disp('9')

addi	$23, 	$0, 	10
bne		$22, 	$23, 	3	# if arg = 10
noop
wli 					49	# disp('10')
wli 					58

addi	$23, 	$0, 	11
bne		$22, 	$23, 	3	# if arg = 11
noop
wli 					49	# disp('11')
wli 					49 

addi	$23, 	$0, 	12
bne		$22, 	$23, 	3	# if arg = 12
noop
wli 					49	# disp('12')
wli 					50

jr $31

#------------------------------- Sleep Function -------------------------------#

Sleep: noop                     # args: $22
                                # uses: $23
sll     $23,    $23,    4
addi    $22,    $0,     0       # i == 0;
sleepLoop:
noop
noop
noop
noop
addi    $22,    $22,    1
beq     $23,    $22,    1
j   sleepLoop

jr $31

DrawFunction: noop              # args  $3 - w | $4 - h | $5 - x | $6 - y | $12 - pmem_start
                                # uses  $1, $2, $7, $8, $9, $10, $11

addi    $1,     $0,     640     # scr_w = 640
addi    $2,     $0,     480     # scr_h = 480
addi    $10,    $0,     0       # color = 0;

#--------- Calc start address ---------#

mult    $7,     $6,     $1      # start = (img_y * scr_w) + img_x
mult    $7,     $6,     $1
mult    $7,     $6,     $1
mult    $7,     $6,     $1
add     $7,     $7,     $5
add     $11,    $7,     $0      # address = start

#------------- Draw Image -------------#

addi    $9,     $0,     0       # j = 0
drawLoopJ:

addi    $8,     $0,     0       # i = 0
drawLoopI:
lp      $10,    0($12)          # color = pmem(p_addr)
lp      $10,    0($12)          # color = pmem(p_addr)
addi    $12,    $12,    1       # p_addr ++
sv      $10,    0($11)          # vmem(start) = 3

addi    $11,    $11,    1       # addr++
addi    $10,    $10,    1       # color++
addi    $8,     $8,     1       # i++

beq     $8,     $3,     1       # if i != img_w break
j drawLoopI                     # else continue loop

add     $7,     $7,     $1      # start += scr_w
add     $11,    $7,     $0      # addr = start
addi    $9,     $9,     1       # j++

beq     $9,     $4,     1       # if j != img_h break
j drawLoopJ                     # else continue loop

jr $31
#-----------------------------------END CHO HAN --------------------------------#

DrawFunction: noop				# args  $3 - w | $4 - h | $5 - x | $6 - y | $12 - pmem_start
								# uses  $1, $2, $7, $8, $9, $10, $11

addi	$1,		$0, 	640 	# scr_w = 640
addi 	$2, 	$0, 	480 	# scr_h = 480
addi 	$10, 	$0, 	0		# color = 0;

#--------- Calc start address ---------#

mult 	$7, 	$6, 	$1 		# start = (img_y * scr_w) + img_x
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
add  	$7, 	$7, 	$5
add 	$11, 	$7, 	$0 		# address = start

#------------- Draw Image -------------#

addi 	$9, 	$0, 	0		# j = 0
drawLoopJ:

addi 	$8, 	$0, 	0		# i = 0
drawLoopI:
lp 		$10, 	0($12)			# color = pmem(p_addr)
lp 		$10, 	0($12)			# color = pmem(p_addr)
addi 	$12, 	$12, 	1 		# p_addr ++
sv 		$10, 	0($11) 			# vmem(start) = 3

addi 	$11, 	$11, 	1 		# addr++
addi 	$10, 	$10, 	1 		# color++
addi 	$8, 	$8, 	1 		# i++

beq 	$8, 	$3, 	1 		# if i != img_w break
j drawLoopI 					# else continue loop

add 	$7, 	$7, 	$1 		# start += scr_w
add 	$11, 	$7, 	$0  	# addr = start
addi 	$9, 	$9, 	1 		# j++

beq 	$9, 	$4, 	1 		# if j != img_h break
j drawLoopJ 					# else continue loop

jr $31

#------------------------------- Draw Function --------------------------------#
DrawBlockFunction: noop			# args  $3 - w | $4 - h | $5 - x | $6 - y | $10 - color
								# uses  $1, $2, $7, $8, $9, $10, $11

addi	$1,		$0, 	640 	# scr_w = 640
addi 	$2, 	$0, 	480 	# scr_h = 480

#--------- Calc start address ---------#

mult 	$7, 	$6, 	$1 		# start = (img_y * scr_w) + img_x
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
mult 	$7, 	$6, 	$1
add  	$7, 	$7, 	$5
add 	$11, 	$7, 	$0 		# address = start

#------------- Draw Image -------------#

addi 	$9, 	$0, 	0		# j = 0
drawBlockLoopJ:

addi 	$8, 	$0, 	0		# i = 0
drawBlockLoopI:
sv 		$10, 	0($11) 			# vmem(start) = 3
addi 	$11, 	$11, 	1 		# addr++
addi 	$8, 	$8, 	1 		# i++

beq 	$8, 	$3, 	1 		# if i != img_w break
j drawBlockLoopI				# else continue loop

add 	$7, 	$7, 	$1 		# start += scr_w
add 	$11, 	$7, 	$0  	# addr = start
addi 	$9, 	$9, 	1 		# j++

beq 	$9, 	$4, 	1 		# if j != img_h break
j drawBlockLoopJ 				# else continue loop

jr $31


#--------------------------------- Menu items ---------------------------------#
printChoHan:
wli 				C   	# disp('Cho-Han')
wli 				h 		
wli 				o
wli 			   	45
wli 				H
wli 				a
wli 				n
wli 		 		32
wli 		 		B
wli 		 		a
wli 		 		k
wli 		 		u
wli 		 		c
wli 		 		h
wli 		 		i
wli 				32
jr 	 $31

printWar:
wli 				W   	# disp('Cho-Han')
wli 				a 		
wli 				r
wli 			   	32
wli 				32
wli 				32
wli 				32
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 				32
jr 	 $31

printBlackjack:
wli 				B   	# disp('Cho-Han')
wli 				l 		
wli 				a
wli 			   	c
wli 				k
wli 				j
wli 				a
wli 		 		c
wli 		 		k
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 		 		32
wli 				32
jr 	 $31

printSlots:
wli					S
wli 				l
wli					o
wli					t
wli					s
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
jr $31

printCasino:
wli					C
wli 				a
wli					s
wli					i
wli					n
wli 				o
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
wli 				32
jr $31

# Clear screen function #
jr $31


#--------------------------- DrawBackground Function --------------------------#
DrawBackground: 	noop		# args $1 - start_color
								# uses $2, $3
addi 	$2, 	$0, 	0 		# i = 0
addi 	$3, 	$0, 	38400	# 
sll 	$3, 	$3, 	3 		# lim = 307200
DrawBackgroundLoop:
sv 		$1, 	0($2) 			# vmem(i) = color
addi 	$2, 	$2, 	1 		# i++
beq 	$2, 	$3, 	1 		# if (i == lim) break
j DrawBackgroundLoop			# else continue loop
jr $31

#------------------------------- Draw Function --------------------------------#
DrawFunction: noop              # args  $3 - w | $4 - h | $5 - x | $6 - y
                                # uses  $1, $2, $7, $8, $9, $10, $11

addi    $1,     $0,     640     # scr_w = 640
addi    $2,     $0,     480     # scr_h = 480
addi    $10,    $0,     0       # color = 0;

#--------- Calc start address ---------#

mult    $7,     $6,     $1      # start = (img_y * scr_w) + img_x
mult    $7,     $6,     $1
mult    $7,     $6,     $1
mult    $7,     $6,     $1
add     $7,     $7,     $5
add     $11,    $7,     $0      # address = start

#------------- Draw Image -------------#

addi    $9,     $0,     0       # j = 0
drawLoopJ:

addi    $8,     $0,     0       # i = 0
drawLoopI:
lp      $10,    0($12)          # color = pmem(p_addr)
lp      $10,    0($12)          # color = pmem(p_addr)
addi    $12,    $12,    1       # p_addr ++
sv      $10,    0($11)          # vmem(start) = 3

addi    $11,    $11,    1       # addr++
addi    $10,    $10,    1       # color++
addi    $8,     $8,     1       # i++

beq     $8,     $3,     1       # if i != img_w break
j drawLoopI                     # else continue loop

add     $7,     $7,     $1      # start += scr_w
add     $11,    $7,     $0      # addr = start
addi    $9,     $9,     1       # j++

beq     $9,     $4,     1       # if j != img_h break
j drawLoopJ                     # else continue loop

jr $31